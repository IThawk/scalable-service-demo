1、数据库负载瞬时升高
	在应用对使用的大量缓存key设置了相同的过期时间。
	在使用缓存时需要进行设计，要充分考虑如何避免常见的缓存穿透、缓存雪崩、缓存并发等问题，尤其是对于高并发的缓存使用，需要对key的过期时间进行随机设置，
	例如，将过期时间设置为10s+random(2)。

2、导致迁移前后两个系统的核心操作重复
	在迁移过程中，重复的流量进入了不同的节点，由于使用了本地缓存存储迁移开关，而迁移开关在开关打开的瞬间导致各个节点的开关状态不一致，有的是开、有的是
	关，所以对于不同节点的流量的处理重复，一个走了开关开的逻辑，一个走了开关关的逻辑。
	避免使用本地缓存来存储迁移开关，迁移开关应该在有状态的订单上标记。

3、某模块设计使用了缓存加速数据库的读操作的性能，但发现数据库负载并没有明显下降。
	由于这个模块的使用方查询的数据在数据库中不存在，是非法数据，所以导致缓存没有命中，每次都穿透到数据库，且量级较大。
	在使用缓存时需要进行缓存设计，要充分考虑如何避免常见的缓存穿透、缓存雪崩、缓存并发等问题，尤其是对高并发的缓存使用，需要对无效的key进行缓存，以抵挡
	恶意的或者无意的对无效缓存查询的攻击或影响。

4、监控系统报警，redis中单个哈希键占用空间巨大
	应用系统使用了哈希键，哈希键本身有过期时间，但是哈希键里面的每个键值对没有过期时间。
	在设计redis的过程中，如果有大量的键值对要保存，则请使用字符串键的数据库类型，并对每个键都设置过期时间，请不要在哈希键内部存储一个没有边界的集合数据，
	实际上，无论是对缓存、内存还是对数据库的设计，如果使用任意一个集合的数据结构，则都要考虑为它设置最大限制，避免内存用光，最常见的是集合溢出导致的内存
	溢出的问题。

5、某业务项目由于缓存宕机导致业务逻辑中断，数据不一致
	redis进行主备切换，导致瞬间应用连接redis异常，应用并没有对缓存做降级处理。
	对于核心业务，在使用缓存时一定要有降级方案，常见的降级方案是在数据库层次预留足够的容量，在某一部分缓存出现问题时，可以让应用暂时回溯到数据库继续业务
	逻辑，而不应该中断业务逻辑，但这需要严格的容量评估。

6、某应用系统负载升高，响应变慢，发现应用进行频繁gc，甚至出现OutOfMemoryError。
	因为这个项目是历史项目，使用了Hibernate ORM，在Hibernate中开启了二级缓存，使用了Ehcache，但是在Ehcache中没有控制缓存对象的个数，缓存对象增多，
	导致内存紧张，所以进行了频繁的gc操作。
	使用本地缓存时，一定要严格控制缓存对象的个数及生命周期。

7、某个正常运行的应用突然报警线程数过高，之后很快就出现内存溢出
	由于缓存连接数达到最大限制，应用无法连接缓存，并且超时时间设置较大，导致访问缓存的服务都在等待缓存操作返回，由于缓存负载较高，处理不完所有的请求，但
	是这些服务都在等待缓存操作返回，服务这时在等待，并没有超时，就不能降级并继续访问数据库。这在bio模式下线程池就会撑满，使用方的线程池也都撑满；在nio
	模式下一样会使服务的负载增加，服务响应变慢，设置使服务被压垮。
	在使用远程缓存时，一定要对超时时间进行设置，这是非常关键的，一般我们设计缓存作为加速数据库读取的手段，也会对缓存操作做降级处理，因此推荐使用更短的缓
	存超时时间，如果一定要给出一个数字，则希望是100毫秒以内。

8、某项目使用缓存存储业务数据，上线后出现错误问题，开发人员束手无策。
	开发人员不知道如何发现、排除、定位和解决缓存问题。
	在设计缓存时要有降级方案，在遇到问题时首先使用降级方法，还要设计完善的监控和报警功能，帮助开发人员快速发现缓存问题，进而来定位和解决问题。

9、某项目在使用缓存后，开发测试通过，到生产环境后，服务却出现了不可预知的问题。
	该应用的缓存key与其他应用缓存key冲突，导致互相覆盖，出现逻辑错误。
	在使用缓存时一定要有隔离设计，可以通过不同的缓存实例来做物理隔离，也可以通过各个应用的缓存key使用不同的前缀进行逻辑隔离。