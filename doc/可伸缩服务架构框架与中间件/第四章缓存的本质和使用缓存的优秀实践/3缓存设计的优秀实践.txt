1、缓存系统主要消耗的是服务器内存，在使用缓存时必须先对应用需要缓存的数据大小进行评估，包括缓存的数据结构、缓存大小、缓存数量、缓存的失效时间，然后根据业务情况
自行推算在未来一定时间内的容量使用情况，根据容量评估的结果来申请和分配缓存资源，否则会造成资源浪费或缓存空间不够

2、建议将使用缓存的业务进行分离，核心业务和非核心业务使用不同的缓存实例，从物理上进行隔离，如果有条件，则请对每个业务使用单独的实例或者集群，以减小应用之间互相影
响的可能性。我听说有些公司应用了共享缓存，造成缓存数据被覆盖，以及缓存数据错乱的线上事故

3、根据缓存实例内存大小推算应用需要使用的缓存实例数量，一般在公司里会成立一个缓存管理的运维团队，这个团队会将缓存资源虚拟成多个相同内存大小的缓存实例，例如，一个实
例有4g内存，在应用申请时可以按需申请足够的实例数量来使用，对这样的应用需要进行分片。这里需要注意，如果我们使用了RDB备份机制，每个实例使用4g内存，则系统需要大于
8g内存，因为RDB备份时使用了copy-on-write机制，需要fork出一个子进程，并且复制一份内存，因此需要双份的内存存储大小

4、缓存一般是用来加速数据库读操作的，一般先访问缓存，后访问数据库，因此缓存的超时时间设置是很重要的，笔者曾经在一家互联网公司遇到过由于运维操作失误导致缓存超时设置
过长，从而拖垮服务的线程池，最终导致服务雪崩的情况

5、所有的缓存实例都需要监控，这是非常重要的，我们需要对慢查询、大对象、内存使用情况做可靠的监控

6、不推荐多个业务共享一个缓存实例，但是由于成本控制的原因，这种情况经常出现，我们需要通过规范来限制各个业务使用的key有唯一的前缀，并进行隔离设计，避免产生缓存互相
覆盖的问题

7、任何缓存的key都必须设置超时时间，且失效时间不能集中在某一点，否则会导致缓存占满内存或者缓存雪崩

8、低频访问的数据不要放在缓存中，我们使用缓存的主要目的是提高读取性能，曾经有人设计了一套定时的批处理系统，由于批处理系统需要对一个大的数据模型进行计算，所以他把这个
数据模型保存在本地缓存中，并通过消息队列接收更新的消息来维护本地缓存中模型的实时性，但是这个模型每个月只用一次，所以这样使用缓存是浪费的，既然是批处理任务，就需要把
任务进行分割，进行批量处理，采用分而治之、逐步计算的方法，得出最终的结果即可

9、缓存的数据不易过大，尤其是redis，因为redis使用的是单线程模型，在单个缓存key数据过大时，会阻塞其他请求的处理

10、对于存储较多value的key，尽量不要使用hgetall等集合操作，该操作会造成请求阻塞，影响其他应用的访问

11、缓存一般用于在交易系统中加速查询的场景，有大量的更新数据时，尤其是批量处理时，请使用批量模式，但是这种场景较少

12、如果对性能要求不是非常高，则尽量使用分布式缓存，不要使用本地缓存，因为本地缓存在服务的各个节点之间复制，在某一时刻副本之间是不一致的，如果这个缓存代表的是开关，而且
分布式系统中请求有可能会重复，就会导致重复的请求走到两个节点，一个节点的开关是开，一个节点的开关是关，如果请求处理没有做到幂等，就会造成处理重复，在严重情况下会造成资金损
失